package org.sonar.plugins.mathematica.rules;

import org.sonar.api.batch.fs.InputFile;
import org.sonar.api.batch.sensor.SensorContext;
import org.sonar.plugins.mathematica.ast.AstNode;
import org.sonar.plugins.mathematica.ast.MathematicaParser;
import org.sonar.plugins.mathematica.ast.VulnerabilityVisitor;

import java.util.List;

/**
 * AST-based Vulnerability Detector (14 + 7 = 21 rules total).
 *
 * PERFORMANCE: Uses single-pass AST traversal instead of 21 sequential regex scans.
 * This provides massive performance improvements for large files:
 * - Old approach: 21 × O(n) regex scans = O(21n) = 829 seconds for 17K line file
 * - New approach: 1 × O(n) AST walk = O(n) = ~10-20 seconds for same file
 *
 * The AST visitor detects all 21 vulnerability patterns in one tree walk.
 */
public class VulnerabilityDetectorAst extends BaseDetector {

    // Performance limit: Skip vulnerability detection on very large files
    private static final int MAX_FILE_SIZE_FOR_VULN_DETECTION = 50_000; // lines

    /**
     * Detect all 21 vulnerability patterns using single-pass AST analysis.
     * PERFORMANCE: Replaces 21 sequential regex scans with one AST walk.
     */
    public void detectAllVulnerabilities(SensorContext context, InputFile inputFile, String content) {
        try {
            // Skip very large files
            if (shouldSkipLargeFile(content, inputFile.filename())) {
                return;
            }

            // Get cached AST or parse
            List<AstNode> ast = astCache.get();
            if (ast == null) {
                MathematicaParser parser = new MathematicaParser();
                ast = parser.parse(content);
                astCache.set(ast);
            }

            if (ast == null || ast.isEmpty()) {
                LOG.debug("No AST available for vulnerability detection: {}", inputFile.filename());
                return;
            }

            // Create visitor and walk AST once to detect all vulnerabilities
            VulnerabilityVisitor visitor = new VulnerabilityVisitor(context, inputFile, sensor);

            for (AstNode node : ast) {
                node.accept(visitor);
            }

            // Report profiling stats
            visitor.reportProfileStats();

            LOG.debug("AST-based vulnerability detection completed for: {}", inputFile.filename());

        } catch (Exception e) {
            LOG.warn("Error in AST-based vulnerability detection for: {} - {}",
                inputFile.filename(), e.getMessage());
        }
    }

    /**
     * Check if file is too large for vulnerability detection.
     * Very large files can cause performance issues even with AST.
     */
    private boolean shouldSkipLargeFile(String content, String filename) {
        int lineCount = 1;
        for (int i = 0; i < content.length(); i++) {
            if (content.charAt(i) == '\n') {
                lineCount++;
                if (lineCount > MAX_FILE_SIZE_FOR_VULN_DETECTION) {
                    LOG.info("Skipping vulnerability detection for large file (>{}K lines): {}",
                        MAX_FILE_SIZE_FOR_VULN_DETECTION / 1000, filename);
                    return true;
                }
            }
        }
        return false;
    }

    // ========== Legacy Methods (kept for compatibility, but not used) ==========

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectHardcodedCredentials(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectCommandInjection(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectSqlInjection(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectCodeInjection(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectPathTraversal(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectWeakCryptography(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectSsrf(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectInsecureDeserialization(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectUnsafeSymbol(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectXXE(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectMissingSanitization(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectInsecureRandomExpanded(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectUnsafeCloudDeploy(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectDynamicInjection(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectToExpressionOnInput(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectUnsanitizedRunProcess(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectMissingCloudAuth(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectHardcodedApiKeys(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectNeedsGetUntrusted(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectExposingSensitiveData(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }

    /** @deprecated Use detectAllVulnerabilities() instead */
    @Deprecated
    public void detectMissingFormFunctionValidation(SensorContext context, InputFile inputFile, String content) {
        // Legacy method - no longer used with AST approach
    }
}
