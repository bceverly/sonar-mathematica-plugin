plugins {
    id 'java'
    id 'maven-publish'
    id 'checkstyle'
}

group = 'org.sonar.plugins'

// Get version from git tag - always use latest tag even with new commits
def getVersionFromGit() {
    try {
        // First try exact match (current commit is tagged)
        def process = ['git', 'describe', '--tags', '--exact-match'].execute()
        process.waitFor()
        if (process.exitValue() == 0) {
            def gitTag = process.text.trim()
            if (gitTag && gitTag.startsWith('v')) {
                return gitTag.substring(1) // Remove 'v' prefix
            }
        }

        // If no exact match, get the most recent tag
        process = ['git', 'describe', '--tags', '--abbrev=0'].execute()
        process.waitFor()
        if (process.exitValue() == 0) {
            def gitTag = process.text.trim()
            if (gitTag && gitTag.startsWith('v')) {
                return gitTag.substring(1) // Remove 'v' prefix, use latest tag
            }
        }

        return '0.1.0-SNAPSHOT'
    } catch (Exception e) {
        return '0.1.0-SNAPSHOT'
    }
}

version = getVersionFromGit()
description = 'SonarQube plugin for Wolfram Mathematica'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo1.maven.org/maven2/'
    }
}

dependencies {
    // SonarQube Plugin API - compile only (provided by SonarQube at runtime)
    compileOnly 'org.sonarsource.api.plugin:sonar-plugin-api:10.7.0.2191'

    // For logging
    compileOnly 'org.slf4j:slf4j-api:2.0.9'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures:10.7.0.2191'
}

test {
    useJUnitPlatform()
}

jar {
    // Set JAR filename to include version
    archiveFileName = "sonar-mathematica-plugin-${project.version}.jar"

    manifest {
        attributes(
            'Plugin-Key': 'mathematica',
            'Plugin-Class': 'org.sonar.plugins.mathematica.MathematicaPlugin',
            'Plugin-Name': 'Mathematica',
            'Plugin-Description': 'Code analyzer for Wolfram Mathematica',
            'Plugin-Version': project.version,
            'Plugin-Organization': 'Community',
            'Plugin-OrganizationUrl': 'https://github.com/bceverly/sonar-mathematica-plugin',
            'Plugin-License': 'GPL-3.0',
            'Plugin-ChildFirstClassLoader': 'false',
            'Sonar-Version': '9.9',
            'SonarLint-Supported': 'true'
        )
    }

    // Include dependencies in the JAR
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to copy the built JAR to SonarQube extensions directory
task installPlugin(type: Copy) {
    dependsOn jar
    from jar.archiveFile
    into "${System.getProperty('user.home')}/.sonar/extensions/plugins"
    doLast {
        println "Plugin installed to: ${System.getProperty('user.home')}/.sonar/extensions/plugins"
        println "Restart SonarQube to activate the plugin"
    }
}

// Checkstyle configuration
checkstyle {
    toolVersion = '10.12.3'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true  // Report issues but don't fail the build
    showViolations = true
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}
